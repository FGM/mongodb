<?php
// $Id$

include_once dirname(__FILE__) . '/../mongodb.module';

/**
 * Fires watchdog messages to mongodb.
 */

/**
 * Implement hook_menu().
 */
function mongodb_watchdog_menu() {
  $items['admin/reports/mongodb'] = array(
    'title' => 'Recent log entries in MongoDB',
    'description' => 'View events that have recently been logged in MongoDB.',
    'page callback' => 'mongodb_watchdog_overview',
    'access arguments' => array('access site reports'),
    'file'  => 'mongodb_watchdog.admin.inc',
  );
  $items['admin/reports/mongodb-event/%mongodb_watchdog_event'] = array(
    'title' => 'MongoDB log details',
    'page callback' => 'mongodb_watchdog_event',
    'page arguments' => array(3),
    'access arguments' => array('access site reports'),
    'type' => MENU_CALLBACK,
    'file' => 'mongodb_watchdog.admin.inc',
  );
  return $items;
}

/**
 * Load the MongoDB watchdog event.
 */
function mongodb_watchdog_event_load($id) {
  $result = mongodb_collection(variable_get('mongodb_collectionname', 'watchdog'))
    ->findOne(array('_id' => new MongoId($id)));
  return $result ? $result : FALSE;
}

/**
 * Implement hook_form_<form_id>_alter for the system logging form.
 *
 * @param array $form
 * @param array $form_state
 * @return void
 */
function mongodb_watchdog_form_system_logging_settings_alter(&$form, &$form_state) {
  $form['mongodb_watchdog'] = array(
    '#type'  => 'fieldset',
    '#title' => t('MongoDB settings'),
    '#collapsible' => TRUE,
  );
  $form['mongodb_watchdog']['mongodb_watchdog_connection'] = array(
    '#title' => t('MongoDB Connection URL'),
    '#type' => 'textfield',
    '#default_value' => variable_get('mongodb_watchdog_connection', NULL),
  );
  $form['mongodb_watchdog']['mongodb_watchdog_dbname'] = array(
    '#title' => t('MongoDB Database name'),
    '#type' => 'textfield',
    '#default_value' => variable_get('mongodb_watchdog_dbname', 'drupal'),
    '#description' => t('In which database should the watchdog be stored'),
  );
  $form['mongodb_watchdog']['mongodb_watchdog_collectionname'] = array(
    '#title' => t('MongoDB Collection name'),
    '#type'  => 'textfield',
    '#default_value' => variable_get('mongodb_watchdog_collectionname', 'watchdog'),
    '#description' => t('In which collection should the watchdog be stored'),
  );
  $form['mongodb_watchdog']['mongodb_watchdog_flood_expire'] = array(
    '#title' => t('MongoDB flood expiration'),
    '#type' => 'textfield',
    '#defualt_value' => variable_get('mongodb_watchdog_flood_expire', 15),
    '#description' => t('If an identical entry occurs within this number of seconds, update the count rather than create a new record, helps with capped collections. Set to -1 to disable flood expiration.'),
  );
}

/**
 * Implement hook_watchdog().
 */
function mongodb_watchdog_watchdog(array $log_entry) {
  // Find the function that generated this error.
  $log_entry = (array) $log_entry;
  _mongodb_watchdog_enhance_log_entry($log_entry, debug_backtrace());

  // Write to watchdog, avoid watchdog spamming by skippng the  write and
  // maintaining a count for similar entries that occur within 10 seconds.
  // We sacrifice accuracy for speed by using only the timestamp and line as
  // the index, and not timestamp, file, and line.
  $collection = mongodb_collection(variable_get('mongodb_collectionname', 'watchdog'));
  $newobj = array(
    '$set' => $log_entry,
    '$inc' => array('count' => 1),
  );
  $query = array(
    'line' => $log_entry['line'],
    'timestamp' => array('$gt' => REQUEST_TIME - variable_get('mongodb_watchdog_flood_expire', 15)),
  );
  $collection->update($query, $newobj, array('upsert' => TRUE, 'multiple' => FALSE));
}

/**
 * Fill in the log_entry function, file, and line.
 */
function _mongodb_watchdog_enhance_log_entry(&$log_entry, $backtrace) {
  // Create list of functions to ignore in backtrace.
  static $ignore = array(
    'mongodb_watchdog_watchdog' => 1,
    'call_user_func_array' => 1,
    'module_invoke' => 1,
    'watchdog' => 1,
    '_drupal_log_error' => 1,
    '_drupal_error_handler' => 1,
    '_drupal_error_handler_real' => 1,
    'theme_render_template' => 1,
  );

  foreach ($backtrace as $bt) {
    if (isset($bt['function'])) {
      if (isset($bt['line']) && !isset($ignore[$bt['function']])) {
        if (isset($bt['file'])) {
          $log_entry['file'] = $bt['file'];
        }
        $log_entry['function'] = $bt['function'];
        $log_entry['line'] = $bt['line'];
        break;
      }
      elseif ($bt['function'] == '_drupal_exception_handler') {
        $e = $bt['args'][0];
        _mongodb_watchdog_enhance_log_entry($log_entry, $e->getTrace());
      }
    }
  }
}
