<?php


use Drupal\Core\Config\FileStorage;
use Drupal\mongodb\Config\ConfigStorage;

/**
 * Implement hook_requirements().
 */
function mongodb_requirements($phase) {
  $requirements = array();

  if (!extension_loaded('mongo')) {
    $requirements['mongodb'] = array(
      'title' => t('Mongodb'),
      'value' => t('Not found'),
      'description' => t('Mongodb requires the PHP MongoDB extension to be installed.'),
      'severity' => REQUIREMENT_ERROR,
    );
  }
  return $requirements;
}


/**
 * Implements hook_install().
 */
function mongodb_install() {
  _mongodb_create_indexes();
  _mongodb_move_configuration();
}

/**
 * Ensures indexes on various Mongo collections.
 */
function _mongodb_create_indexes() {
  $mongo = \Drupal::service('mongo');
  $settings = \Drupal::service('settings')->get('mongo');

  // Flood indexes.
  $mongo->get('flood')->ensureIndex(
    array(
      'event' => 1,
      'identifier' => 1,
      'timestamp' => 1,
      'expiration' => 1,
    )
  );
  if (isset($settings['flood']['ttl'])) {
    $ttl = $settings['flood']['ttl'];
  }
  else {
    $ttl = 300;
  }
  $mongo->get('flood')->ensureIndex(array('expiration' => 1), array('expireAfterSeconds' => $ttl));

  // File usage indexes
  $mongo->get('file_usage')->ensureIndex(array(
    'fid' => 1,
    'module' => 1,
    'type' => 1,
    'id' => 1,
    'count' => 1,
  ));
  $mongo->get('file_usage')->ensureIndex(array(
    'fid' => 1,
    'module' => 1,
    'count' => 1,
  ));
  $mongo->get('file_usage')->ensureIndex(array(
    'fid' => 1,
    'count' => 1,
  ));

  // Path alias.
  $mongo->get('url_alias')->ensureIndex(array('alias' => 1, 'langcode' => 1, '_id' => 1));
  $mongo->get('url_alias')->ensureIndex(array('source' => 1, 'langcode' => 1, '_id' => 1));
}

/**
 * Move configuration from file storage to mongo.
 */
function _mongodb_move_configuration() {
  $source = new FileStorage(config_get_config_directory(CONFIG_ACTIVE_DIRECTORY));
  $destination = new ConfigStorage(\Drupal::service('mongo'), \Drupal::service('string_translation'));
  \Drupal::service('config.manager')->createSnapshot($source, $destination);

  $snapshot = new ConfigStorage(\Drupal::service('mongo'), \Drupal::service('string_translation'), 'snapshot');
  \Drupal::service('config.manager')->createSnapshot($source, $snapshot);
}
