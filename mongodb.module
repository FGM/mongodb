<?php
// $Id$

/**
 * Implement hook_help().
 */
function mongodb_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mongodb':
      return '<p>' . t('<a href="!project">MongoDB</a> implements a generic <a href="!mongo">MongoDB</a> interface.',
        array(
          '!project' => 'http://drupal.org/project/mongodb',
          '!mongo' => 'http://www.mongodb.org/',
        ));
      break;
  }
}

/**
 * Returns an MongoDB object.
 */
function mongodb($alias = 'default') {
  static $mongo_objects;
  $connections = variable_get('mongodb_connections', array());
  $connections += array('default' => array('host' => 'localhost', 'db' => 'drupal'));
  if (!isset($connections[$alias])) {
    $alias = 'default';
  }
  $connection = $connections[$alias];
  $host = $connection['host'];
  $db = $connection['db'];
  if (!isset($mongo_objects[$host][$db])) {
    $mongo = new Mongo($host);
    $mongo_objects[$host][$db] = $mongo->selectDB($db);
  }
  return $mongo_objects[$host][$db];
}

/**
 * Returns a MongoCollection object.
 */
function mongodb_collection() {
  $args = array_filter(func_get_args());
  if (is_array($args[0])) {
    list($collection_name, $prefixed) = $args[0];
    $prefixed .= $collection_name;
  }
  else {
    // Avoid something. collection names if NULLs are passed in.
    $collection_name = implode('.', array_filter($args));
    $prefixed = mongodb_collection_name($collection_name);
  }
  $collections = variable_get('mongodb_collections', array());
  $alias = isset($collections[$collection_name]) ? $collections[$collection_name] : 'default';
  // Prefix the collection name for simpletest. It will be in the same DB as the
  // non-prefixed version so it's enough to prefix after choosing the mongodb
  // object.
  return mongodb($alias)->selectCollection($prefixed);
}

/**
 * Returns the name to use for the collection, which works with prefixes and simpletest.
 */
function mongodb_collection_name($name) {
  global $db_prefix;
  static $simpletest_prefix;
  // We call this function earlier than the database is initalized so we would
  // read the parent collection without this.
  if (!isset($simpletest_prefix)) {
    if (isset($_SERVER['HTTP_USER_AGENT']) && preg_match("/^(simpletest\d+);/", $_SERVER['HTTP_USER_AGENT'], $matches)) {
      $simpletest_prefix = $matches[1];
    }
    else {
      $simpletest_prefix = '';
    }
  }
  $db_prefix_string = is_array($db_prefix) ? $db_prefix['default'] : $db_prefix;
  // However, once $db_prefix is filled by the database, the simpletest_prefix
  // is no longer needed.
  if ($simpletest_prefix && $db_prefix_string && strpos($db_prefix_string, $simpletest_prefix) !== FALSE) {
    $simpletest_prefix = '';
  }
  return $db_prefix_string . $simpletest_prefix . $name;
}

function mongodb_test_group_finished() {
  $aliases = variable_get('mongodb_connections', array());
  $aliases['default'] = TRUE;
  foreach (array_keys($aliases) as $alias) {
    $db = mongodb($alias);
    foreach ($db->listCollections() as $collection) {
      if (preg_match('/\.simpletest\d+/', $collection)) {
        $db->dropCollection($collection);
      }
    }
  }
}

/**
 * Return the next id in a sequence.
 */
function mongodb_next_id($name, $existing_id = 0) {
  // Make sure that the sequence key exists.
  mongodb_collection('sequence')->insert(array('_id' => $name, 'value' => 0));

  // Atomitcaly get the next id in the sequence.
  $mongo = mongodb();
  $cmd = array(
    'findandmodify' => mongodb_collection_name('sequence'),
    'query' => array('_id' => $name),
    'update' => array('$inc' => array('value' => 1)),
    'new' => TRUE,
  );
  $sequence = $mongo->command($cmd);
  $value = isset($sequence['value']['value']) ? $sequence['value']['value'] : 0;
  if (0 < $existing_id - $value + 1) {
    $cmd = array(
      'findandmodify' => mongodb_collection_name('sequence'),
      'query' => array('_id' => $name),
      'update' => array('$inc' => array('value' => $existing_id - $value + 1)),
      'new' => TRUE,
    );
    $sequence = $mongo->command($cmd);
    $value = isset($sequence['value']['value']) ? $sequence['value']['value'] : 0;
  }
  return $value;
}
