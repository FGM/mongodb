<?php
// $Id$

/**
 * Implement hook_help().
 */
function mongodb_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mongodb':
      return '<p>' . t('<a href="!project">MongoDB</a> implements a generic <a href="!mongo">MongoDB</a> interface.',
        array(
          '!project' => 'http://drupal.org/project/mongodb',
          '!mongo' => 'http://www.mongodb.org/',
        ));
      break;
  }
}

/**
 * Returns a the MongoDB object.
 */
function mongodb() {
  static $mongo;
  if (!isset($mongo)) {
    $server_name  = variable_get('mongodb_connection', 'localhost');
    $db_name = variable_get('mongodb_dbname', 'drupal');
    $mongo = new Mongo($server_name);
    $mongo = $mongo->selectDB($db_name);
  }
  return $mongo;
}

/**
 * Returns a the MongoCollection object.
 */
function mongodb_collection($collection_name) {
  static $collections;
  $collection_name = mongodb_collection_name($collection_name);
  if (!isset($collections[$collection_name])) {
    $collections[$collection_name] = mongodb()->selectCollection($collection_name);
  }
  return $collections[$collection_name];
}

/**
 * Returns the name to use for the collection, which works with prefixes and simpletest.
 */
function mongodb_collection_name($name) {
  global $db_prefix;
  static $simpletest_prefix;
  // We call this function earlier than the database is initalized so we would
  // read the parent collection without this.
  if (!isset($simpletest_prefix)) {
    if (isset($_SERVER['HTTP_USER_AGENT']) && preg_match("/^(simpletest\d+);/", $_SERVER['HTTP_USER_AGENT'], $matches)) {
      $simpletest_prefix = $matches[1];
    }
    else {
      $simpletest_prefix = '';
    }
  }
  $db_prefix_string = is_array($db_prefix) ? $db_prefix['default'] : $db_prefix;
  // However, once $db_prefix is filled by the database, the simpletest_prefix
  // is no longer needed.
  if ($simpletest_prefix && $db_prefix_string && strpos($db_prefix_string, $simpletest_prefix) !== FALSE) {
    $simpletest_prefix = '';
  }
  return $db_prefix_string . $simpletest_prefix . $name;
}

function mongodb_test_group_finished() {
  $db = mongodb_collection('cache')->db;
  foreach ($db->listCollections() as $collection) {
    if (preg_match('/\.simpletest\d+/', $collection)) {
      $db->dropCollection($collection);
    }
  }
}

/**
 * Return the next id in a sequence.
 */
function mongodb_next_id($name) {
  // Make sure that the sequence key exists.
  mongodb_collection('sequence')->insert(array('_id' => $name, 'value' => 0));

  // Atomitcaly get the next id in the sequence.
  $mongo = mongodb();
  $cmd = array(
    'findandmodify' => mongodb_collection_name('sequence'),
    'query' => array('_id' => $name),
    'update' => array('$inc' => array('value' => 1)),
    'new' => TRUE,
  );
  $sequence = $mongo->command($cmd);
  return isset($sequence['value']['value']) ? $sequence['value']['value'] : 0;
}
